# 使用.NET 5 SDK作为构建镜像，以便编译和发布你的应用程序
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env  
WORKDIR /app  
  
# 将当前目录下的内容复制到容器中的/app目录中  
# 假设Dockerfile位于项目根目录，且csproj文件也在那里  
COPY . ./  
  
# 运行dotnet restore来恢复项目的依赖项  
RUN dotnet restore  
  
# 使用dotnet publish来发布你的应用程序，并将输出放置到/out目录  
# 注意：这里假设项目文件名为YourProject.csproj，并且你想要输出到/out目录  
RUN dotnet publish -c Release -o out  
  
# 使用.NET 5 Runtime作为最终的运行时镜像  
FROM mcr.microsoft.com/dotnet/aspnet:8.0  
WORKDIR /app  
  
# 从构建环境中复制发布后的应用程序到运行环境中  
COPY --from=build-env /app/out .  
  
# 设置ASPNETCORE_URLS环境变量以监听所有地址（或仅特定地址和端口）  
# 如果你打算在Kubernetes中使用，通常设置为 "http://+:80" 或 "https://+:443"  
ENV ASPNETCORE_URLS=http://+:80  
  
# 指定容器启动时执行的命令  
# 这里，我们使用dotnet来运行应用程序的dll文件  
ENTRYPOINT ["dotnet", "HelloWorld.dll"]
